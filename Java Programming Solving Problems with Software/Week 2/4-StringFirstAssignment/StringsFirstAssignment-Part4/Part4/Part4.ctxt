#BlueJ class context
comment0.target=Part4
comment0.text=\r\n\ Write\ a\ description\ of\ Part4\ here.\r\n\ \r\n\ @author\ (Alessandrror)\ \r\n\ @version\ (No\ version.\ Thanks\ to\ Duke\ and\ Coursera)\r\n\ \r\n\ What\ does\ it\ the\ program\r\n\ \r\n\ Part\ 4\:\ Finding\ Web\ Links\r\n\ Write\ a\ program\ that\ reads\ the\ lines\ from\ the\ file\ at\ this\ URL\ location,\ \r\n\ http\://www.dukelearntoprogram.com/course2/data/manylinks.html,\ \r\n\ and\ prints\ each\ URL\ on\ the\ page\ that\ is\ a\ link\ to\ youtube.com.\ \r\n\ Assume\ that\ a\ link\ to\ youtube.com\ has\ no\ spaces\ in\ it\ \r\n\ and\ would\ be\ in\ the\ format\ \r\n\ (where\ [stuff]\ represents\ characters\ that\ are\ not\ verbatim)\:\ \u201Chttp\:[stuff]youtube.com[stuff]\u201D\r\n\ \r\n\ Here\ are\ suggestions\ to\ get\ started.\r\n\ \r\n\ 1.\ Create\ a\ new\ Java\ Class\ named\ Part4\ in\ the\ StringsFirstAssignments\ project\ and\ put\ your\ code\ in\ that\ class.\r\n\ \r\n\ 2.\ Use\ URLResource\ to\ read\ the\ file\ at\ http\://www.dukelearntoprogram.com/course2/data/manylinks.html\ word\ by\ word.\r\n\ \r\n\ 3.\ For\ each\ word,\ check\ to\ see\ if\ \u201Cyoutube.com\u201D\ is\ in\ it.\ \r\n\ If\ it\ is,\ find\ the\ double\ quote\ to\ the\ left\ and\ right\ of\ the\ occurrence\ of\ \u201Cyoutube.com\u201D\ \r\n\ to\ identify\ the\ beginning\ and\ end\ of\ the\ URL.\ \ Note,\ the\ double\ quotation\ mark\ is\ a\ special\ character\ in\ Java.\ \r\n\ To\ look\ for\ a\ double\ quote,\ look\ for\ (\\\u201D),\ \r\n\ since\ the\ backslash\ (\\)\ character\ indicates\ we\ want\ the\ literal\ quotation\ marks\ (\u201C)\ \r\n\ and\ not\ the\ Java\ character.\ The\ string\ you\ search\ for\ would\ be\ written\ \u201C\\\u201D\u201D\ for\ one\ double\ quotation\ mark.\r\n\ \r\n\ 4.\ In\ addition\ to\ the\ String\ method\ indexOf(x,\ num),\ \r\n\ you\ might\ want\ to\ consider\ using\ the\ String\ method\ lastIndexOf(s,\ num)\ \r\n\ that\ can\ be\ used\ with\ two\ parameters\ s\ and\ num.\ \r\n\ The\ parameter\ s\ is\ the\ string\ or\ character\ \ to\ look\ for,\ \ \r\n\ and\ num\ is\ the\ last\ position\ in\ the\ string\ to\ look\ for\ it.\ \r\n\ This\ method\ returns\ the\ last\ match\ from\ the\ start\ of\ the\ string\ up\ to\ the\ num\ position,\ \r\n\ so\ it\ is\ a\ good\ option\ for\ finding\ the\ opening\ quotation\ mark\ of\ a\ string\ searching\ backward\ from\ \u201Cyoutube.com.\u201D\ \r\n\ More\ information\ on\ String\ methods\ can\ be\ found\ in\ the\ Java\ documentation\ for\ Strings\:\ \r\n\ http\://docs.oracle.com/javase/7/docs/api/java/lang/String.html.\r\n\ \r\n\ Caution\:\ The\ word\ Youtube\ could\ appear\ in\ different\ cases\ \r\n\ such\ as\ YouTube,\ youtube,\ or\ YOUTUBE.\ \r\n\ You\ can\ find\ the\ URLs\ more\ easily\ by\ converting\ the\ string\ to\ lowercase.\ \r\n\ However,\ you\ will\ need\ the\ original\ string\ (with\ uppercase\ and\ lowercase\ letters)\ \r\n\ to\ view\ the\ YouTube\ URL\ to\ answer\ a\ quiz\ question\ because\ YouTube\ links\ are\ case\ sensitive.\ \r\n\ The\ link\ https\://www.youtube.com/watch?v\=ji5_MqicxSo\ \r\n\ is\ different\ than\ the\ link\ https\://www.youtube.com/watch?v\=ji5_mqicxso,\ \r\n\ where\ all\ the\ letters\ are\ lowercase.\r\n\ \r\n
comment1.params=url
comment1.target=void\ printYTUrls(java.lang.String)
comment2.params=
comment2.target=void\ testUrl()
comment3.params=args
comment3.target=void\ main(java.lang.String[])
numComments=4
