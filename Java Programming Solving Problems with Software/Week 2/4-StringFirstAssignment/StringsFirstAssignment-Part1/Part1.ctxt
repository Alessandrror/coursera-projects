#BlueJ class context
comment0.target=Part1
comment0.text=\r\n\ Write\ a\ description\ of\ Part1\ here.\r\n\ This\ program\ let\ you\ know\ if\ you\ pass\ some\ DNA\ string\ or\ not\r\n\ @author\ (Alessandrror)\ \r\n\ @version\ (No\ version\:\ Thanks\ to\ Duke\ and\ Coursera)\r\n\ \r\n\ What\ it\ does\ the\ program?\r\n\ \r\n\ Part\ 1\:\ Finding\ a\ Gene\ -\ Using\ the\ Simplified\ Algorithm\r\n\ This\ assignment\ is\ to\ write\ the\ code\ from\ the\ lesson\ from\ scratch\ by\ following\ the\ steps\ below.\ \r\n\ This\ will\ help\ you\ see\ if\ you\ really\ understood\ how\ to\ put\ the\ code\ together,\ \r\n\ and\ might\ identify\ a\ part\ that\ you\ did\ not\ fully\ understand.\ \r\n\ If\ you\ get\ stuck,\ then\ you\ can\ go\ back\ and\ watch\ the\ coding\ videos\ that\ go\ with\ this\ lesson\ again.\ \r\n\ We\ recommend\ you\ try\ this\ with\ many\ of\ the\ future\ Java\ coding\ examples\ before\ starting\ programming\ exercises.\r\n\ \r\n\ Specifically,\ you\ should\ do\ the\ following\:\r\n\ \r\n\ 1.\ Create\ a\ new\ Java\ project\ named\ StringsFirstAssignments.\ \r\n\ You\ can\ put\ all\ the\ classes\ for\ this\ programming\ exercise\ in\ this\ project.\r\n\ \r\n\ 2.\ Create\ a\ new\ Java\ Class\ named\ Part1.\ The\ following\ methods\ go\ in\ this\ class.\r\n\ \r\n\ 3.\ .\ Write\ the\ method\ findSimpleGene\ that\ has\ one\ String\ parameter\ dna,\ representing\ a\ string\ of\ DNA.\ \r\n\ This\ method\ does\ the\ following\:\r\n\ \r\n\ Finds\ the\ index\ position\ of\ the\ start\ codon\ \u201CATG\u201D.\ If\ there\ is\ no\ \u201CATG\u201D,\ return\ the\ empty\ string.\r\n\ \r\n\ Finds\ the\ index\ position\ of\ the\ first\ stop\ codon\ \u201CTAA\u201D\ appearing\ after\ the\ \u201CATG\u201D\ that\ was\ found.\ \r\n\ If\ there\ is\ no\ such\ \u201CTAA\u201D,\ return\ the\ empty\ string.\ \r\n\ \r\n\ If\ the\ length\ of\ the\ substring\ between\ the\ \u201CATG\u201D\ and\ \u201CTAA\u201D\ is\ a\ multiple\ of\ 3,\ \r\n\ then\ return\ the\ substring\ that\ starts\ with\ that\ \u201CATG\u201D\ and\ ends\ with\ that\ \u201CTAA\u201D.\r\n\ \r\n\ 4.\ Write\ the\ void\ method\ testSimpleGene\ that\ has\ no\ parameters.\ \r\n\ You\ should\ create\ five\ DNA\ strings.\ \r\n\ The\ strings\ should\ have\ specific\ test\ cases,\ such\ as\:\ \r\n\ DNA\ with\ no\ \u201CATG\u201D,\ \r\n\ DNA\ with\ no\ \u201CTAA\u201D,\ \r\n\ DNA\ with\ no\ \u201CATG\u201D\ or\ \u201CTAA\u201D,\ \r\n\ DNA\ with\ ATG,\ TAA\ and\ the\ substring\ between\ them\ is\ a\ multiple\ of\ 3\ (a\ gene),\ \r\n\ and\ DNA\ with\ ATG,\ TAA\ and\ the\ substring\ between\ them\ is\ not\ a\ multiple\ of\ 3.\ \r\n\ For\ each\ DNA\ string\ you\ should\:\ \r\n\ \r\n\ Print\ the\ DNA\ string.\ \r\n\ \r\n\ See\ if\ there\ is\ a\ gene\ by\ calling\ findSimpleGene\ with\ this\ string\ as\ the\ parameter.\ \r\n\ If\ a\ gene\ exists\ following\ our\ algorithm\ above,\ then\ print\ the\ gene,\ otherwise\ print\ the\ empty\ string.\r\n
comment1.params=dna
comment1.target=java.lang.String\ findSimpleGene(java.lang.String)
comment2.params=
comment2.target=void\ testSimpleGene()
comment3.params=args
comment3.target=void\ main(java.lang.String[])
numComments=4
